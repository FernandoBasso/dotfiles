#+TITLE: My Init Org File
#+STARTUP: content
#+PROPERTY: header-args :results none :exports none

* General Configs

** Basic

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(setq frame-title-format "%b | Always Be Awesome!")
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)

;; For terminal non-blinking cursor. See C-h m Emacs RET m Cursor Display RET.
(setq visible-cursor nil)

(setq backup-directory-alist `(("." . "~/Projects/dotfiles/tmp/emacs_stuff")))

(set-face-attribute 'default nil
                    :family "Source Code Variable"
                    :height 120
                    :weight 'normal
                    :width 'normal)
; (set-default-font "Source Code Variable 13")
; (set-default-font "Ubuntu Mono 13")
; (set-default-font "Noto Sans Mono 13")
; (set-default-font "Hermit 13")

(global-visual-line-mode t)

(setq visual-line-fringe-indicators
      '(left-curly-arrow right-curly-arrow))

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "epiphany")

;; It is causing problems with org-ellipsis set to â¤µ .
;(global-linum-mode 2)
(global-linum-mode 1)
(setq linum-format "%4d \u2502")

(setq show-trailing-whitespace t)
(setq delete-trailing-lines nil)
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Use spaces.
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
#+END_SRC

** Cursor

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
(xterm-mouse-mode)

;; Restore cursor position
(if (version< emacs-version "25.0")
(progn
  (require 'saveplace)
  (setq-default save-place t))
(save-place-mode 1))
#+END_SRC


* Packages

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-enable-at-startup nil)

(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/") t)

(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package which-key
  :ensure t
  :config (which-key-mode))

(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib
  :config)

#+END_SRC


** Haskell

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t)

(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(setq
 ;ghc-ghc-options '("-fno-warn-missing-signatures")
 ;haskell-compile-cabal-build-command "cd %s && stack build"
 haskell-process-type 'stack-ghci
 haskell-interactive-popup-errors nil
 ;haskell-process-args-stack-ghci '("--ghc-options=-ferror-spans" "--with-ghc=ghci-ng")
 haskell-process-path-ghci "stack"
)
#+END_SRC


** Paredit and Other Lisp-Related Goodies

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :config
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
  (show-paren-mode 1))
#+END_SRC


** org-babel enabled languages

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (scheme . t)
   (ruby . t)
   (haskell . t)))

;; Ask (t) or don't ask (nil) for confirmation to evaluate?
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t)
#+END_SRC


** Key bindings

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-default-notes-file "~/Dropbox/orgmode/tempnotes.org")
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

** Org-mode General Settings

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-window-setup 'current-window)
(setq org-edit-src-content-indentation 0)
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)
(setq org-html-htmlize-output-type 'css)

;; Bigger Latex Fragments
(plist-put org-format-latex-options :scale 1.5)
#+END_SRC

** Org Babel
** Htmlzie

** Htmlize

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC


** Dired Sidebar

https://github.com/jojojames/dired-sidebar

#+begin_src emacs-lisp
(use-package dired-sidebar
  :bind (("C-x C-n" . dired-sidebar-toggle-sidebar))
  :ensure t
  :commands (dired-sidebar-toggle-sidebar)
  :init
  (add-hook 'dired-sidebar-mode-hook
            (lambda ()
              (unless (file-remote-p default-directory)
                (auto-revert-mode))))
  :config
  (push 'toggle-window-split dired-sidebar-toggle-hidden-commands)
  (push 'rotate-windows dired-sidebar-toggle-hidden-commands)

  (setq dired-sidebar-subtree-line-prefix "__")
  (setq dired-sidebar-theme 'vscode)
  (setq dired-sidebar-use-term-integration t)
  (setq dired-sidebar-use-custom-font t))
#+end_src

** Todo Keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WORKING(w)" "PAUSED(p)" "WAIT(W)" "VERIFY(v)" "|" "DELEGATED(D)" "CANCELED(c)" "DONE(d)")))
#+END_SRC

* Themes

#+BEGIN_SRC emacs-lisp
;;
;; TODO: M-x load-theme TAB
; (load-theme 'zenburn t)
#+END_SRC

#+RESULTS:
: t

