#+TITLE: My Init Org File
#+STARTUP: content
#+PROPERTY: header-args :results none :exports none

* Basic

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(setq frame-title-format "%b | Always Be Awesome!")
(fset 'yes-or-no-p 'y-or-n-p)
(global-set-key (kbd "<f5>") 'revert-buffer)

(global-set-key (kbd "C-c t l") 'toggle-truncate-lines)

(save-place-mode 1)
(savehist-mode 1)

;;
;; So we don't end up with the damn two spayces after “.”
;;
;; https://www.gnu.org/software/emacs/manual/html_node/emacs/Sentences.html
;;
(setq sentence-end-double-space nil)

;; For terminal non-blinking cursor. See C-h m Emacs RET m Cursor Display RET.
(setq visible-cursor nil)

(setq backup-directory-alist `(("." . "~/Projects/dotfiles/tmp/emacs_stuff")))

; (set-face-attribute 'default nil
;                     :family "Source Code Variable"
;                     :height 120
;                     :weight 'normal
;                     :width 'normal)
(set-face-attribute 'default nil
                    :family "ProFontIIx Nerd Font"
                    :height 120
                    :weight 'normal
                    :width 'normal)
; (set-default-font "Source Code Variable 13")
; (set-default-font "Ubuntu Mono 13")
; (set-default-font "Noto Sans Mono 13")
; (set-default-font "Hermit 13")

(setq-default line-spacing 0.0)

(set-face-italic 'font-lock-comment-face nil)

(global-visual-line-mode t)

(setq visual-line-fringe-indicators
      '(left-curly-arrow right-curly-arrow))

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "epiphany")

;; It is causing problems with org-ellipsis set to ⤵ .
;(global-linum-mode 2)
(global-linum-mode -1)
(setq linum-format "%4d \u2502")

(setq show-trailing-whitespace t)
(setq delete-trailing-lines nil)
(setq-default show-trailing-whitespace t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
; (add-hook 'before-save-hook 'delete-blank-lines)
;; Use spaces.
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
#+END_SRC

** Prettify-Symbols Mode
[[https://www.emacswiki.org/emacs/PrettyLambda#toc1][Pretty Lambda (EmacsWiki)]]

#+begin_src emacs-lisp
(defun my-pretty-lambda ()
  "Make some word or string show as pretty unicode symbol"
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955) ; λ
          )))

;(add-hook 'scheme-mode-hook 'my-pretty-lambda)
;(global-prettify-symbols-mode 1)
#+end_src

* Cursor

#+BEGIN_SRC emacs-lisp
(blink-cursor-mode -1)
(xterm-mouse-mode)

;; Restore cursor position
(if (version< emacs-version "25.0")
(progn
  (require 'saveplace)
  (setq-default save-place t))
(save-place-mode 1))
#+END_SRC


* Packages

#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-enable-at-startup nil)

(add-to-list 'package-archives
             '("org" . "https://orgmode.org/elpa/") t)

(add-to-list 'package-archives
             '("melpa-stable" . "https://stable.melpa.org/packages/") t)

(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package which-key
  :ensure t
  :config (which-key-mode))

(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure org-plus-contrib
  :config)

#+END_SRC


** EditorConfig
#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :config
  (editorconfig-mode 1))
#+end_src

** Haskell

#+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :ensure t)

(add-hook 'haskell-mode-hook 'interactive-haskell-mode)

(setq
 haskell-process-type 'stack-ghci
 haskell-interactive-popup-errors nil
 haskell-process-path-ghci "stack"
 ;; https://github.com/haskell/haskell-mode/issues/1695
 haskell-interactive-types-for-show-ambiguous nil)
#+END_SRC

** TypeScript
#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t)
#+end_src

** Paredit and Other Lisp-Related Goodies

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :ensure t
  :config
  (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  (add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
  (show-paren-mode 1))
#+END_SRC


** org-babel enabled languages

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (shell . t)
   (scheme . t)
   (ruby . t)
   (haskell . t)))

;; Ask (t) or don't ask (nil) for confirmation to evaluate?
(setq org-confirm-babel-evaluate nil)
#+END_SRC

** flyspell

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure t)
#+END_SRC


** Geiser
#+begin_src emacs-lisp
(use-package geiser
  :ensure t
  :hook (scheme-mode . geiser-mode)
  :config
  (setq geiser-active-implementations '(chicken racket)))
#+end_src

** Key bindings

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-default-notes-file "~/Dropbox/orgmode/tempnotes.org")
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

** Org-mode General Settings

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
(setq org-src-tab-acts-natively t)
(setq org-src-window-setup 'current-window)
(setq org-edit-src-content-indentation 0)
(setq org-goto-interface 'outline-path-completion)
(setq org-outline-path-complete-in-steps nil)
(setq org-html-htmlize-output-type 'css)


;; Bigger Latex Fragments
(plist-put org-format-latex-options :scale 1.5)
#+END_SRC

** Org Babel

** Htmlize

#+BEGIN_SRC emacs-lisp
(use-package htmlize
  :ensure t)
#+END_SRC


** NeoTree
https://www.emacswiki.org/emacs/NeoTree

https://github.com/jaypei/emacs-neotree

#+begin_src emacs-lisp
(use-package neotree
  :ensure t)

(global-set-key [f4] 'neotree-toggle)
#+end_src


** Magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :config
  (global-set-key (kbd "C-x g") 'magit-status))
#+end_src

** Projectile

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+end_src

** Todo Keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '((sequence "TODO(t)" "WORKING(w)" "PAUSED(p)" "WAIT(W)" "VERIFY(v)" "|" "DELEGATED(D)" "CANCELED(c)" "DONE(d)")))
#+END_SRC

** Theme Packages
#+begin_src emacs-lisp

#+end_src

* Themes
Load theme first because so we can disable damn bold and italic later.

NOTE: If we ~use-package~ a theme, it also loads that theme. That means if the another theme is loaded later, and it doesn't override some stuff from the first loaded theme, then we end up with ugly and/or undreadable stuff.

#+BEGIN_SRC emacs-lisp
;;(use-package zenburn-theme
;;  :ensure t)
;;
;;(use-package gruvbox-theme
;;  :ensure t)

;(load-theme 'zenburn t)
;(load-theme 'tango)

;; Do away with bold fonts.
(mapc
 (lambda (face)
        (when (eq (face-attribute face :weight) 'bold)
          (set-face-attribute face nil :weight 'normal)))
 (face-list))
#+END_SRC

