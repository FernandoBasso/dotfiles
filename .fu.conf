;; -*- scheme -*-

(cond-expand
 (chicken-4
  (void))
 (chicken-5
  (import (chicken format)
          (chicken pathname)
          (chicken process)
          (chicken process-context)))
 (else
  (error "Unsupported CHICKEN version.")))

(fu-editor
 (lambda (file)
   (system (sprintf "emacs -nw ~a" (qs file)))
   (print-selected-file file)))

(define home
  (let ((dir (get-environment-variable "HOME")))
    (lambda (path)
      (make-pathname dir path))))

(load (home "Projects/From-Other-People/fu/goodies/grep.scm"))
(load (home "Projects/From-Other-People/fu/goodies/ignore-dot-git.scm"))
(load (home "Projects/From-Other-People/fu/goodies/ignore-emacs-backups.scm"))
(load (home "Projects/From-Other-People/fu/goodies/ignore-file-extensions.scm"))

(ignore-file-extensions '("o" "so" "jlc" "pyc"))

(define-command 'm
  "m <f options> <pattern>
  Find & play music."
  (let ((player (lambda (file)
                  (system (sprintf "mplayer ~a" (qs file))))))
    (fu-find/operate player
                     dir: (home "musicas")
                     multiple-choices?: #t)))

(define-command 'o
  "o <f options> <pattern>
  Find & open files."
  (let ((opener
         (lambda (file)
           (let ((ext (pathname-extension file)))
             (if ext
                 (let* ((ext (string->symbol (string-downcase ext)))
                        (program
                         (case ext
                           ((html htm) "firefox")
                           ((avi mpg mpeg mp3 mp4 mov) "mplayer")
                           ((pdf) "mupdf")
                           ((txt) "less")
                           ((wav) "play")
                           ((egg) "cat")
                           ((png jpg jpeg) "display")
                           (else
                            (die! "Don't know how to open ~a files." ext)))))
                   (system (sprintf "~a ~a" program (qs file))))
                 (die! "Don't know how to open ~a." file))))))
    (fu-find/operate opener)))
